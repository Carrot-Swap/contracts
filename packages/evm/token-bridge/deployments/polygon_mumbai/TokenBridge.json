{
  "address": "0x7e753a9f5585e67149d452F94309f490c3853A89",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "carrotBridgeConnectorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBridgeMessageCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBridgeRevertCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidDestinationChainId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Burned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "connector",
      "outputs": [
        {
          "internalType": "contract CarrotBridgeConnectorBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "interactorsByChainId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "txSenderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sourceChainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "destinationAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            }
          ],
          "internalType": "struct CarrotBridgeInterfaces.BridgeMessage",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "onBridgeMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "txSenderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sourceChainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "destinationAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "destinationChainId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            }
          ],
          "internalType": "struct CarrotBridgeInterfaces.BridgeRevert",
          "name": "bridgeRevert",
          "type": "tuple"
        }
      ],
      "name": "onBridgeRevert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "sendETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "setInteractorByChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x84288f7daa79a1f16f345ca842b3bed6b4db55d5ae6999acfb21c97bb71165d3",
  "receipt": {
    "to": null,
    "from": "0xef1F5D4C835Ac094F8D96C26c2A964C99b4050e0",
    "contractAddress": "0x7e753a9f5585e67149d452F94309f490c3853A89",
    "transactionIndex": 1,
    "gasUsed": "940133",
    "logsBloom": "0x
    "blockHash": "0x24fc0859bd1a7c916f5bfb72b0ed30d1cc472c4e0286af62cbff4887aaa7702c",
    "transactionHash": "0x84288f7daa79a1f16f345ca842b3bed6b4db55d5ae6999acfb21c97bb71165d3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 41510220,
        "transactionHash": "0x84288f7daa79a1f16f345ca842b3bed6b4db55d5ae6999acfb21c97bb71165d3",
        "address": "0x7e753a9f5585e67149d452F94309f490c3853A89",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ef1f5d4c835ac094f8d96c26c2a964c99b4050e0"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x24fc0859bd1a7c916f5bfb72b0ed30d1cc472c4e0286af62cbff4887aaa7702c"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 41510220,
        "transactionHash": "0x84288f7daa79a1f16f345ca842b3bed6b4db55d5ae6999acfb21c97bb71165d3",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ef1f5d4c835ac094f8d96c26c2a964c99b4050e0",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000a05235085160000000000000000000000000000000000000000000000000007bf23d351fad2420000000000000000000000000000000000000000000003015347b382d2f9fee100000000000000000000000000000000000000000000000007b51eb00175bc420000000000000000000000000000000000000000000003015351b8a6237f14e1",
        "logIndex": 4,
        "blockHash": "0x24fc0859bd1a7c916f5bfb72b0ed30d1cc472c4e0286af62cbff4887aaa7702c"
      }
    ],
    "blockNumber": 41510220,
    "cumulativeGasUsed": "1045449",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9d0178586025Df843FD8a18B5c1DC8e44BC6d01a"
  ],
  "numDeployments": 3,
  "solcInputHash": "302c41a4706f9671649bb9f3b57eff78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"carrotBridgeConnectorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBridgeMessageCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBridgeRevertCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDestinationChainId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connector\",\"outputs\":[{\"internalType\":\"contract CarrotBridgeConnectorBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"interactorsByChainId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"txSenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct CarrotBridgeInterfaces.BridgeMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"onBridgeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"txSenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct CarrotBridgeInterfaces.BridgeRevert\",\"name\":\"bridgeRevert\",\"type\":\"tuple\"}],\"name\":\"onBridgeRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"sendETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setInteractorByChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"onBridgeRevert((address,uint256,address,uint256,bytes))\":{\"details\":\"onBridgeRevert is called when a cross-chain message reverts. It's useful to rollback to the original state\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenBridge.sol\":\"TokenBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@carrot-swap/bridge-evm/contracts/CarrotBridgeConnector.base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\nimport \\\"./libraries/Pausable.sol\\\";\\n\\nimport \\\"./interfaces/ConnectorErrors.sol\\\";\\nimport \\\"./interfaces/CarrotBridgeInterfaces.sol\\\";\\n\\n/**\\n * @dev Main abstraction of CarrotBridgeConnector.\\n * This contract manages interactions between TSS and different chains.\\n * There's an instance of this contract on each chain supported by CarrotBridge.\\n */\\ncontract CarrotBridgeConnectorBase is ConnectorErrors, Pausable {\\n    /**\\n     * @dev Multisig contract to pause incoming transactions.\\n     * The responsibility of pausing outgoing transactions is left to the protocol for more flexibility.\\n     */\\n    address public pauserAddress;\\n\\n    /**\\n     * @dev Collectively held by CarrotBridge validators.\\n     */\\n    address public tssAddress;\\n\\n    /**\\n     * @dev This address will start pointing to a multisig contract, then it will become the TSS address itself.\\n     */\\n    address public tssAddressUpdater;\\n\\n    event BridgeMessageSent(\\n        address sourceTxOriginAddress,\\n        address indexed bridgeTxSenderAddress,\\n        uint256 indexed destinationChainId,\\n        address destinationAddress,\\n        uint256 destinationGasLimit,\\n        bytes message,\\n        bytes bridgeParams\\n    );\\n\\n    event BridgeMessageReceived(\\n        address bridgeTxSenderAddress,\\n        uint256 indexed sourceChainId,\\n        address indexed destinationAddress,\\n        bytes message,\\n        bytes32 indexed internalSendHash\\n    );\\n\\n    event BridgeMessageReverted(\\n        address bridgeTxSenderAddress,\\n        uint256 sourceChainId,\\n        uint256 indexed destinationChainId,\\n        address destinationAddress,\\n        bytes message,\\n        bytes32 indexed internalSendHash\\n    );\\n\\n    event TSSAddressUpdated(address callerAddress, address newTssAddress);\\n\\n    event TSSAddressUpdaterUpdated(address callerAddress, address newTssUpdaterAddress);\\n\\n    event PauserAddressUpdated(address callerAddress, address newTssAddress);\\n\\n    /**\\n     * @dev Constructor requires initial addresses.\\n     */\\n    constructor(address tssAddress_, address tssAddressUpdater_, address pauserAddress_) {\\n        if (\\n            tssAddress_ == address(0) ||\\n            tssAddressUpdater_ == address(0) ||\\n            pauserAddress_ == address(0)\\n        ) {\\n            revert CommonErrors.InvalidAddress();\\n        }\\n\\n        tssAddress = tssAddress_;\\n        tssAddressUpdater = tssAddressUpdater_;\\n        pauserAddress = pauserAddress_;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict actions to pauser address.\\n     */\\n    modifier onlyPauser() {\\n        if (msg.sender != pauserAddress) revert CallerIsNotPauser(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict actions to TSS address.\\n     */\\n    modifier onlyTssAddress() {\\n        if (msg.sender != tssAddress) revert CallerIsNotTss(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict actions to TSS updater address.\\n     */\\n    modifier onlyTssUpdater() {\\n        if (msg.sender != tssAddressUpdater) revert CallerIsNotTssUpdater(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Update the pauser address. The only address allowed to do that is the current pauser.\\n     */\\n    function updatePauserAddress(address pauserAddress_) external onlyPauser {\\n        if (pauserAddress_ == address(0)) revert CommonErrors.InvalidAddress();\\n\\n        pauserAddress = pauserAddress_;\\n\\n        emit PauserAddressUpdated(msg.sender, pauserAddress_);\\n    }\\n\\n    /**\\n     * @dev Update the TSS address. The address can be updated by the TSS updater or the TSS address itself.\\n     */\\n    function updateTssAddress(address tssAddress_) external {\\n        if (msg.sender != tssAddress && msg.sender != tssAddressUpdater)\\n            revert CallerIsNotTssOrUpdater(msg.sender);\\n        if (tssAddress_ == address(0)) revert CommonErrors.InvalidAddress();\\n\\n        tssAddress = tssAddress_;\\n\\n        emit TSSAddressUpdated(msg.sender, tssAddress_);\\n    }\\n\\n    /**\\n     * @dev Changes the ownership of tssAddressUpdater to be the one held by the CarrotBridge TSS Signer nodes.\\n     */\\n    function renounceTssAddressUpdater() external onlyTssUpdater {\\n        if (tssAddress == address(0)) revert CommonErrors.InvalidAddress();\\n\\n        tssAddressUpdater = tssAddress;\\n        emit TSSAddressUpdaterUpdated(msg.sender, tssAddressUpdater);\\n    }\\n\\n    /**\\n     * @dev Pause the input (send) transactions.\\n     */\\n\\n    function pause() external onlyPauser {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract to allow transactions again.\\n     */\\n\\n    function unpause() external onlyPauser {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Entrypoint to send data and value through CarrotBridge.\\n     */\\n    function send(CarrotBridgeInterfaces.SendInput calldata input) external virtual {}\\n\\n    /**\\n     * @dev Handler to receive data from other chain.\\n     * This method can be called only by TSS. Access validation is in implementation.\\n     */\\n    function onReceive(\\n        address bridgeTxSenderAddress,\\n        uint256 sourceChainId,\\n        address destinationAddress,\\n        bytes calldata message,\\n        bytes32 internalSendHash\\n    ) external virtual {}\\n\\n    /**\\n     * @dev Handler to receive errors from other chain.\\n     * This method can be called only by TSS. Access validation is in implementation.\\n     */\\n    function onRevert(\\n        address bridgeTxSenderAddress,\\n        uint256 sourceChainId,\\n        address destinationAddress,\\n        uint256 destinationChainId,\\n        bytes calldata message,\\n        bytes32 internalSendHash\\n    ) external virtual {}\\n}\\n\",\"keccak256\":\"0x89b50fa7a751882ad1fcdccc008981928e671b71d04dbc03b5369d5d5f7e29ce\",\"license\":\"MIT\"},\"@carrot-swap/bridge-evm/contracts/CarrotBridgeInteractor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./interfaces/CarrotBridgeInterfaces.sol\\\";\\nimport \\\"./interfaces/CarrotBridgeInteractorErrors.sol\\\";\\nimport \\\"./CarrotBridgeConnector.base.sol\\\";\\n\\nabstract contract CarrotBridgeInteractor is Ownable, CarrotBridgeInteractorErrors {\\n    bytes32 constant ZERO_BYTES = keccak256(new bytes(0));\\n    uint256 internal immutable currentChainId;\\n    CarrotBridgeConnectorBase public immutable connector;\\n\\n    /**\\n     * @dev Maps a chain id to its corresponding address of the MultiChainSwap contract\\n     * The address is expressed in bytes to allow non-EVM chains\\n     * This mapping is useful, mainly, for two reasons:\\n     *  - Given a chain id, the contract is able to route a transaction to its corresponding address\\n     *  - To check that the messages (onBridgeMessage, onBridgeRevert) come from a trusted source\\n     */\\n    mapping(uint256 => address) public interactorsByChainId;\\n\\n    modifier isValidMessageCall(CarrotBridgeInterfaces.BridgeMessage calldata bridgeMessage) {\\n        _isValidCaller();\\n        if ((bridgeMessage.txSenderAddress) != (interactorsByChainId[bridgeMessage.sourceChainId]))\\n            revert InvalidBridgeMessageCall();\\n        _;\\n    }\\n\\n    modifier isValidRevertCall(CarrotBridgeInterfaces.BridgeRevert calldata bridgeRevert) {\\n        _isValidCaller();\\n        if (bridgeRevert.txSenderAddress != address(this)) revert InvalidBridgeRevertCall();\\n        if (bridgeRevert.sourceChainId != currentChainId) revert InvalidBridgeRevertCall();\\n        _;\\n    }\\n\\n    constructor(address carrotBridgeConnectorAddress) {\\n        if (carrotBridgeConnectorAddress == address(0)) revert CommonErrors.InvalidAddress();\\n        currentChainId = block.chainid;\\n        connector = CarrotBridgeConnectorBase(carrotBridgeConnectorAddress);\\n    }\\n\\n    function _isValidCaller() private view {\\n        if (msg.sender != address(connector)) revert InvalidCaller(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Useful for contracts that inherit from this one\\n     */\\n    function _isValidChainId(uint256 chainId) internal view returns (bool) {\\n        return ((interactorsByChainId[chainId]) != address(0));\\n    }\\n\\n    function setInteractorByChainId(\\n        uint256 destinationChainId,\\n        address contractAddress\\n    ) external onlyOwner {\\n        interactorsByChainId[destinationChainId] = contractAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xee7b80b16662bab1f17e90ac04fe2c47a83c0571840322a7896118ed1ca47175\",\"license\":\"MIT\"},\"@carrot-swap/bridge-evm/contracts/interfaces/CarrotBridgeInteractorErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\n/**\\n * @dev Interface with Bridge Interactor errors\\n */\\ninterface CarrotBridgeInteractorErrors {\\n    // @dev Thrown when try to send a message or tokens to a non whitelisted chain\\n    error InvalidDestinationChainId();\\n\\n    // @dev Thrown when the caller is invalid. e.g.: if onBridgeMessage or onBridgeRevert are not called by Connector\\n    error InvalidCaller(address caller);\\n\\n    // @dev Thrown when message on onBridgeMessage has the wrong format\\n    error InvalidBridgeMessageCall();\\n\\n    // @dev Thrown when message on onBridgeRevert has the wrong format\\n    error InvalidBridgeRevertCall();\\n}\\n\",\"keccak256\":\"0x586607226c4d4c722f2514302358b897d072c9a442807256d57d9e039af7c226\",\"license\":\"MIT\"},\"@carrot-swap/bridge-evm/contracts/interfaces/CarrotBridgeInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\ninterface CarrotBridgeInterfaces {\\n    /**\\n     * @dev Use SendInput to interact with the Connector: connector.send(SendInput)\\n     */\\n    struct SendInput {\\n        /// @dev Chain id of the destination chain.\\n        uint256 destinationChainId;\\n        /// @dev Address receiving the message on the destination chain (expressed in bytes since it can be non-EVM)\\n        address destinationAddress;\\n        /// @dev Gas limit for the destination chain's transaction\\n        uint256 destinationGasLimit;\\n        /// @dev An encoded, arbitrary message to be parsed by the destination contract\\n        bytes message;\\n        /// @dev Optional parameters for the CarrotBridge protocol\\n        bytes bridgeParams;\\n    }\\n\\n    /**\\n     * @dev Our Connector calls onBridgeMessage with this struct as argument\\n     */\\n    struct BridgeMessage {\\n        address txSenderAddress;\\n        uint256 sourceChainId;\\n        address destinationAddress;\\n        bytes message;\\n    }\\n\\n    /**\\n     * @dev Our Connector calls onBridgeRevert with this struct as argument\\n     */\\n    struct BridgeRevert {\\n        address txSenderAddress;\\n        uint256 sourceChainId;\\n        address destinationAddress;\\n        uint256 destinationChainId;\\n        bytes message;\\n    }\\n}\\n\\ninterface CarrotBridgeConnector {\\n    /**\\n     * @dev Sending value and data cross-chain is as easy as calling connector.send(SendInput)\\n     */\\n    function send(CarrotBridgeInterfaces.SendInput calldata input) external;\\n}\\n\\ninterface CarrotBridgeReceiver {\\n    /**\\n     * @dev onBridgeMessage is called when a cross-chain message reaches a contract\\n     */\\n    function onBridgeMessage(CarrotBridgeInterfaces.BridgeMessage calldata bridgeMessage) external;\\n\\n    /**\\n     * @dev onBridgeRevert is called when a cross-chain message reverts.\\n     * It's useful to rollback to the original state\\n     */\\n    function onBridgeRevert(CarrotBridgeInterfaces.BridgeRevert calldata bridgeRevert) external;\\n}\\n\\ninterface CommonErrors {\\n    error InvalidAddress();\\n}\\n\",\"keccak256\":\"0x400356545f8f9eb2b47b150e7b5cdc964f7b37d370be2f539f806a2507942109\",\"license\":\"MIT\"},\"@carrot-swap/bridge-evm/contracts/interfaces/ConnectorErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\n/**\\n * @dev Interface with connector custom errors\\n */\\ninterface ConnectorErrors {\\n    // @dev Thrown when caller is not the address defined as paused address\\n    error CallerIsNotPauser(address caller);\\n\\n    // @dev Thrown when caller is not the address defined as TSS address\\n    error CallerIsNotTss(address caller);\\n\\n    // @dev Thrown when caller is not the address defined as TSS Updater address\\n    error CallerIsNotTssUpdater(address caller);\\n\\n    // @dev Thrown when caller is not the address defined as TSS or TSS Updater address\\n    error CallerIsNotTssOrUpdater(address caller);\\n\\n    // @dev Thrown when maxSupply will be exceed if minting will proceed\\n    error ExceedsMaxSupply(uint256 maxSupply);\\n}\\n\",\"keccak256\":\"0xddce7d4ebd128004e9d63f85a4a9d1a9f0d2a63aefa445ca9cd1bbc812e663b4\",\"license\":\"MIT\"},\"@carrot-swap/bridge-evm/contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity >=0.8.7;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe515ff86f8f077d987d8b21bc28616f77b06177cfe98b044f91233a9f40dae03\",\"license\":\"MIT\"},\"@carrot-swap/bridge-evm/contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity >=0.8.7;\\n\\nimport {Context} from \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x80f235917b081727b4c6f13c8a8f480118f68a7ea3697efefd77b33430634a06\",\"license\":\"MIT\"},\"@carrot-swap/bridge-evm/contracts/libraries/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity >=0.8.7;\\n\\nimport {Context} from \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe98439c725e5f37787eebdaf5a65f840002dc37f44e408e284d3875557ab9735\",\"license\":\"MIT\"},\"contracts/TokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\nimport \\\"@carrot-swap/bridge-evm/contracts/CarrotBridgeInteractor.sol\\\";\\nimport \\\"@carrot-swap/bridge-evm/contracts/interfaces/CarrotBridgeInterfaces.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract TokenBridge is CarrotBridgeInteractor, CarrotBridgeReceiver {\\n    mapping(uint256 => address) tokenMap;\\n    mapping(uint256 => address) allowedSender;\\n\\n    constructor(\\n        address carrotBridgeConnectorAddress\\n    ) public CarrotBridgeInteractor(carrotBridgeConnectorAddress) Ownable(msg.sender) {}\\n\\n    function onBridgeMessage(\\n        CarrotBridgeInterfaces.BridgeMessage calldata message\\n    ) external override isValidMessageCall(message) {\\n        (uint256 tokenId, address to, uint256 amount) = abi.decode(\\n            message.message,\\n            (uint256, address, uint256)\\n        );\\n        mint(message.sourceChainId, message.txSenderAddress, tokenId, to, amount);\\n    }\\n\\n    function onBridgeRevert(\\n        CarrotBridgeInterfaces.BridgeRevert calldata bridgeRevert\\n    ) external override isValidRevertCall(bridgeRevert) {}\\n\\n    function mint(\\n        uint256 sourceChainId,\\n        address txSenderAddress,\\n        uint256 tokenId,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        require(\\n            address(connector) == _msgSender() || connector.tssAddress() == _msgSender(),\\n            \\\"Permission Denied\\\"\\n        );\\n        require((allowedSender[sourceChainId]) != txSenderAddress, \\\"Not allowed\\\");\\n        require(tokenId == currentChainId || tokenMap[tokenId] != address(0), \\\"Not valid chain id\\\");\\n        if (tokenId == currentChainId) {\\n            payable(to).transfer(amount);\\n        } else {\\n            IERC20(tokenMap[tokenId]).mint(to, amount);\\n        }\\n        emit Minted(tokenId, to, amount);\\n    }\\n\\n    function sendETH(address toAddress, uint256 chainId) external payable {\\n        require(interactorsByChainId[chainId] != address(0), \\\"Not valid chain id\\\");\\n        emit Burned(currentChainId, msg.sender, msg.value);\\n        connector.send(\\n            CarrotBridgeInterfaces.SendInput({\\n                destinationChainId: chainId,\\n                destinationAddress: interactorsByChainId[chainId],\\n                destinationGasLimit: 0,\\n                message: abi.encode(currentChainId, toAddress, msg.value),\\n                bridgeParams: abi.encode(\\\"\\\")\\n            })\\n        );\\n    }\\n\\n    function sendERC20(\\n        address toAddress,\\n        uint256 chainId,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external {\\n        require(tokenMap[tokenId] != address(0), \\\"Not valid chain id\\\");\\n        require(interactorsByChainId[chainId] != address(0), \\\"Not valid chain id\\\");\\n        IERC20(tokenMap[tokenId]).transferFrom(msg.sender, address(this), amount);\\n        IERC20(tokenMap[tokenId]).burn(amount);\\n        emit Burned(tokenId, msg.sender, amount);\\n        connector.send(\\n            CarrotBridgeInterfaces.SendInput({\\n                destinationChainId: chainId,\\n                destinationAddress: interactorsByChainId[chainId],\\n                destinationGasLimit: 0,\\n                message: abi.encode(tokenId, toAddress, amount),\\n                bridgeParams: abi.encode(\\\"\\\")\\n            })\\n        );\\n    }\\n\\n    function setToken(uint256 tokenId, address tokenAddress) external onlyOwner {\\n        tokenMap[tokenId] = tokenAddress;\\n    }\\n\\n    event Minted(uint256 tokenId, address to, uint256 amount);\\n    event Burned(uint256 tokenId, address from, uint256 amount);\\n\\n    modifier onlyTssOrConnector() {\\n        if (address(connector) != _msgSender() && connector.tssAddress() != _msgSender()) {\\n            revert(\\\"Permission Denied\\\");\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2944451777b8754741235b9a0f6c80f83d2f3175a1d094279503a9f3ccacb6c3\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./Mintable.sol\\\";\\n\\ninterface IERC20 is Mintable {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x45461a2f25120578f6494a306564adececf072adb9229029d0710530a1b9e1a8\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface Mintable {\\n    function mint(address to, uint amount) external;\\n\\n    function burn(uint amount) external;\\n}\\n\",\"keccak256\":\"0x0f28da3b30b85bb0ea94339476d8643cf4bf3d266b8257d6570a930f2d0c6c26\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161111538038061111583398101604081905261002f916100ed565b80338061005657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005f8161009d565b506001600160a01b0381166100875760405163e6c4247b60e01b815260040160405180910390fd5b466080526001600160a01b031660a0525061011d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ff57600080fd5b81516001600160a01b038116811461011657600080fd5b9392505050565b60805160a051610f94610181600039600081816101af015281816103d70152818161074001528181610893015281816108d501526109110152600081816103680152818161040c0152818161050901528181610a450152610aa50152610f946000f3fe60806040526004361061009c5760003560e01c8063715018a611610064578063715018a61461016857806380bd3cab1461017d57806383f3084f1461019d5780638da5cb5b146101d1578063af906cf3146101ef578063f2fde38b1461020f57600080fd5b80632618143f146100a1578063358e8305146100f3578063469cff8c1461011557806364a197f3146101355780636e66e10d14610148575b600080fd5b3480156100ad57600080fd5b506100d76100bc366004610c3a565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100ff57600080fd5b5061011361010e366004610c53565b61022f565b005b34801561012157600080fd5b50610113610130366004610caa565b6102d2565b610113610143366004610cda565b610308565b34801561015457600080fd5b50610113610163366004610d06565b6104c9565b34801561017457600080fd5b5061011361054f565b34801561018957600080fd5b50610113610198366004610d41565b610563565b3480156101a957600080fd5b506100d77f000000000000000000000000000000000000000000000000000000000000000081565b3480156101dd57600080fd5b506000546001600160a01b03166100d7565b3480156101fb57600080fd5b5061011361020a366004610caa565b610814565b34801561021b57600080fd5b5061011361022a366004610d7c565b61084a565b80610238610888565b60208082018035600090815260019092526040909120546001600160a01b0316906102639083610d7c565b6001600160a01b03161461028a576040516302795bef60e41b815260040160405180910390fd5b6000808061029b6060860186610d99565b8101906102a89190610de7565b919450925090506102cb602086018035906102c39088610d7c565b8585856108d3565b5050505050565b6102da610bbd565b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000818152600160205260409020546001600160a01b03166103455760405162461bcd60e51b815260040161033c90610e1f565b60405180910390fd5b7f7a6396f9141e42bbd82eddb43e30077ef07aaafcd4ee3dfbd6adb1dca8f2445a7f0000000000000000000000000000000000000000000000000000000000000000333460405161039893929190610e4b565b60405180910390a16040805160a081018252828152600083815260016020908152838220546001600160a01b03908116828501528385019290925292517f00000000000000000000000000000000000000000000000000000000000000009091169263d42ae69792916060830191610436917f0000000000000000000000000000000000000000000000000000000000000000918991349101610e4b565b604051602081830303815290604052815260200160405160200161046590602080825260009082015260400190565b6040516020818303038152906040528152506040518263ffffffff1660e01b81526004016104939190610eb7565b600060405180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b505050505050565b806104d2610888565b306104e06020830183610d7c565b6001600160a01b0316146105075760405163325da14960e11b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081602001351461054b5760405163325da14960e11b815260040160405180910390fd5b5050565b610557610bbd565b6105616000610bea565b565b6000828152600260205260409020546001600160a01b03166105975760405162461bcd60e51b815260040161033c90610e1f565b6000838152600160205260409020546001600160a01b03166105cb5760405162461bcd60e51b815260040161033c90610e1f565b600082815260026020526040908190205490516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561062a57600080fd5b505af115801561063e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106629190610f1f565b5060008281526002602052604090819020549051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156106b657600080fd5b505af11580156106ca573d6000803e3d6000fd5b505050507f7a6396f9141e42bbd82eddb43e30077ef07aaafcd4ee3dfbd6adb1dca8f2445a82338360405161070193929190610e4b565b60405180910390a16040805160a081018252848152600085815260016020908152838220546001600160a01b03908116828501528385019290925292517f00000000000000000000000000000000000000000000000000000000000000009091169263d42ae6979291606083019161077f9188918b91899101610e4b565b60405160208183030381529060405281526020016040516020016107ae90602080825260009082015260400190565b6040516020818303038152906040528152506040518263ffffffff1660e01b81526004016107dc9190610eb7565b600060405180830381600087803b1580156107f657600080fd5b505af115801561080a573d6000803e3d6000fd5b5050505050505050565b61081c610bbd565b60009182526002602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b610852610bbd565b6001600160a01b03811661087c57604051631e4fbdf760e01b81526000600482015260240161033c565b61088581610bea565b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105615760405163065ece9760e51b815233600482015260240161033c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314806109ab5750336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b1125916040518163ffffffff1660e01b815260040160206040518083038186803b15801561096857600080fd5b505afa15801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a09190610f41565b6001600160a01b0316145b6109eb5760405162461bcd60e51b815260206004820152601160248201527014195c9b5a5cdcda5bdb8811195b9a5959607a1b604482015260640161033c565b6000858152600360205260409020546001600160a01b0385811691161415610a435760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b604482015260640161033c565b7f0000000000000000000000000000000000000000000000000000000000000000831480610a8757506000838152600260205260409020546001600160a01b031615155b610aa35760405162461bcd60e51b815260040161033c90610e1f565b7f0000000000000000000000000000000000000000000000000000000000000000831415610b07576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610b01573d6000803e3d6000fd5b50610b7b565b600083815260026020526040908190205490516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015610b6257600080fd5b505af1158015610b76573d6000803e3d6000fd5b505050505b7fc9d0543a84d3510329c0783b91576878ceb484e8699944cb5610c3436b3b8e39838383604051610bae93929190610e4b565b60405180910390a15050505050565b6000546001600160a01b031633146105615760405163118cdaa760e01b815233600482015260240161033c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610c4c57600080fd5b5035919050565b600060208284031215610c6557600080fd5b813567ffffffffffffffff811115610c7c57600080fd5b820160808185031215610c8e57600080fd5b9392505050565b6001600160a01b038116811461088557600080fd5b60008060408385031215610cbd57600080fd5b823591506020830135610ccf81610c95565b809150509250929050565b60008060408385031215610ced57600080fd5b8235610cf881610c95565b946020939093013593505050565b600060208284031215610d1857600080fd5b813567ffffffffffffffff811115610d2f57600080fd5b820160a08185031215610c8e57600080fd5b60008060008060808587031215610d5757600080fd5b8435610d6281610c95565b966020860135965060408601359560600135945092505050565b600060208284031215610d8e57600080fd5b8135610c8e81610c95565b6000808335601e19843603018112610db057600080fd5b83018035915067ffffffffffffffff821115610dcb57600080fd5b602001915036819003821315610de057600080fd5b9250929050565b600080600060608486031215610dfc57600080fd5b833592506020840135610e0e81610c95565b929592945050506040919091013590565b602080825260129082015271139bdd081d985b1a590818da185a5b881a5960721b604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b6000815180845260005b81811015610e9057602081850181015186830182015201610e74565b81811115610ea2576000602083870101525b50601f01601f19169290920160200192915050565b602081528151602082015260018060a01b036020830151166040820152604082015160608201526000606083015160a06080840152610ef960c0840182610e6a565b90506080840151601f198483030160a0850152610f168282610e6a565b95945050505050565b600060208284031215610f3157600080fd5b81518015158114610c8e57600080fd5b600060208284031215610f5357600080fd5b8151610c8e81610c9556fea2646970667358221220d0891cfe024b2cb9a997a232d975c4ba4b06a3bbab150fc9805f40c8208179cf64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c8063715018a611610064578063715018a61461016857806380bd3cab1461017d57806383f3084f1461019d5780638da5cb5b146101d1578063af906cf3146101ef578063f2fde38b1461020f57600080fd5b80632618143f146100a1578063358e8305146100f3578063469cff8c1461011557806364a197f3146101355780636e66e10d14610148575b600080fd5b3480156100ad57600080fd5b506100d76100bc366004610c3a565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100ff57600080fd5b5061011361010e366004610c53565b61022f565b005b34801561012157600080fd5b50610113610130366004610caa565b6102d2565b610113610143366004610cda565b610308565b34801561015457600080fd5b50610113610163366004610d06565b6104c9565b34801561017457600080fd5b5061011361054f565b34801561018957600080fd5b50610113610198366004610d41565b610563565b3480156101a957600080fd5b506100d77f000000000000000000000000000000000000000000000000000000000000000081565b3480156101dd57600080fd5b506000546001600160a01b03166100d7565b3480156101fb57600080fd5b5061011361020a366004610caa565b610814565b34801561021b57600080fd5b5061011361022a366004610d7c565b61084a565b80610238610888565b60208082018035600090815260019092526040909120546001600160a01b0316906102639083610d7c565b6001600160a01b03161461028a576040516302795bef60e41b815260040160405180910390fd5b6000808061029b6060860186610d99565b8101906102a89190610de7565b919450925090506102cb602086018035906102c39088610d7c565b8585856108d3565b5050505050565b6102da610bbd565b60009182526001602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000818152600160205260409020546001600160a01b03166103455760405162461bcd60e51b815260040161033c90610e1f565b60405180910390fd5b7f7a6396f9141e42bbd82eddb43e30077ef07aaafcd4ee3dfbd6adb1dca8f2445a7f0000000000000000000000000000000000000000000000000000000000000000333460405161039893929190610e4b565b60405180910390a16040805160a081018252828152600083815260016020908152838220546001600160a01b03908116828501528385019290925292517f00000000000000000000000000000000000000000000000000000000000000009091169263d42ae69792916060830191610436917f0000000000000000000000000000000000000000000000000000000000000000918991349101610e4b565b604051602081830303815290604052815260200160405160200161046590602080825260009082015260400190565b6040516020818303038152906040528152506040518263ffffffff1660e01b81526004016104939190610eb7565b600060405180830381600087803b1580156104ad57600080fd5b505af11580156104c1573d6000803e3d6000fd5b505050505050565b806104d2610888565b306104e06020830183610d7c565b6001600160a01b0316146105075760405163325da14960e11b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081602001351461054b5760405163325da14960e11b815260040160405180910390fd5b5050565b610557610bbd565b6105616000610bea565b565b6000828152600260205260409020546001600160a01b03166105975760405162461bcd60e51b815260040161033c90610e1f565b6000838152600160205260409020546001600160a01b03166105cb5760405162461bcd60e51b815260040161033c90610e1f565b600082815260026020526040908190205490516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561062a57600080fd5b505af115801561063e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106629190610f1f565b5060008281526002602052604090819020549051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c6890602401600060405180830381600087803b1580156106b657600080fd5b505af11580156106ca573d6000803e3d6000fd5b505050507f7a6396f9141e42bbd82eddb43e30077ef07aaafcd4ee3dfbd6adb1dca8f2445a82338360405161070193929190610e4b565b60405180910390a16040805160a081018252848152600085815260016020908152838220546001600160a01b03908116828501528385019290925292517f00000000000000000000000000000000000000000000000000000000000000009091169263d42ae6979291606083019161077f9188918b91899101610e4b565b60405160208183030381529060405281526020016040516020016107ae90602080825260009082015260400190565b6040516020818303038152906040528152506040518263ffffffff1660e01b81526004016107dc9190610eb7565b600060405180830381600087803b1580156107f657600080fd5b505af115801561080a573d6000803e3d6000fd5b5050505050505050565b61081c610bbd565b60009182526002602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b610852610bbd565b6001600160a01b03811661087c57604051631e4fbdf760e01b81526000600482015260240161033c565b61088581610bea565b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105615760405163065ece9760e51b815233600482015260240161033c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314806109ab5750336001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b1125916040518163ffffffff1660e01b815260040160206040518083038186803b15801561096857600080fd5b505afa15801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a09190610f41565b6001600160a01b0316145b6109eb5760405162461bcd60e51b815260206004820152601160248201527014195c9b5a5cdcda5bdb8811195b9a5959607a1b604482015260640161033c565b6000858152600360205260409020546001600160a01b0385811691161415610a435760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b604482015260640161033c565b7f0000000000000000000000000000000000000000000000000000000000000000831480610a8757506000838152600260205260409020546001600160a01b031615155b610aa35760405162461bcd60e51b815260040161033c90610e1f565b7f0000000000000000000000000000000000000000000000000000000000000000831415610b07576040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610b01573d6000803e3d6000fd5b50610b7b565b600083815260026020526040908190205490516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015610b6257600080fd5b505af1158015610b76573d6000803e3d6000fd5b505050505b7fc9d0543a84d3510329c0783b91576878ceb484e8699944cb5610c3436b3b8e39838383604051610bae93929190610e4b565b60405180910390a15050505050565b6000546001600160a01b031633146105615760405163118cdaa760e01b815233600482015260240161033c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610c4c57600080fd5b5035919050565b600060208284031215610c6557600080fd5b813567ffffffffffffffff811115610c7c57600080fd5b820160808185031215610c8e57600080fd5b9392505050565b6001600160a01b038116811461088557600080fd5b60008060408385031215610cbd57600080fd5b823591506020830135610ccf81610c95565b809150509250929050565b60008060408385031215610ced57600080fd5b8235610cf881610c95565b946020939093013593505050565b600060208284031215610d1857600080fd5b813567ffffffffffffffff811115610d2f57600080fd5b820160a08185031215610c8e57600080fd5b60008060008060808587031215610d5757600080fd5b8435610d6281610c95565b966020860135965060408601359560600135945092505050565b600060208284031215610d8e57600080fd5b8135610c8e81610c95565b6000808335601e19843603018112610db057600080fd5b83018035915067ffffffffffffffff821115610dcb57600080fd5b602001915036819003821315610de057600080fd5b9250929050565b600080600060608486031215610dfc57600080fd5b833592506020840135610e0e81610c95565b929592945050506040919091013590565b602080825260129082015271139bdd081d985b1a590818da185a5b881a5960721b604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b6000815180845260005b81811015610e9057602081850181015186830182015201610e74565b81811115610ea2576000602083870101525b50601f01601f19169290920160200192915050565b602081528151602082015260018060a01b036020830151166040820152604082015160608201526000606083015160a06080840152610ef960c0840182610e6a565b90506080840151601f198483030160a0850152610f168282610e6a565b95945050505050565b600060208284031215610f3157600080fd5b81518015158114610c8e57600080fd5b600060208284031215610f5357600080fd5b8151610c8e81610c9556fea2646970667358221220d0891cfe024b2cb9a997a232d975c4ba4b06a3bbab150fc9805f40c8208179cf64736f6c63430008090033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "onBridgeRevert((address,uint256,address,uint256,bytes))": {
        "details": "onBridgeRevert is called when a cross-chain message reverts. It's useful to rollback to the original state"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 635,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 366,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "interactorsByChainId",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 904,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "tokenMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 908,
        "contract": "contracts/TokenBridge.sol:TokenBridge",
        "label": "allowedSender",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}