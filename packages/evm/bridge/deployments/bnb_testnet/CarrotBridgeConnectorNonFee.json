{
  "address": "0xAd0Bc3A152355CFa13b36DC953272bAD305DE7E0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tssAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tssAddressUpdater_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauserAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerIsNotPauser",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerIsNotTss",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerIsNotTssOrUpdater",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerIsNotTssUpdater",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        }
      ],
      "name": "ExceedsMaxSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "bridgeTxSenderAddress",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destinationAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "internalSendHash",
          "type": "bytes32"
        }
      ],
      "name": "BridgeMessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridgeTxSenderAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "destinationAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "internalSendHash",
          "type": "bytes32"
        }
      ],
      "name": "BridgeMessageReverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sourceTxOriginAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridgeTxSenderAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "destinationAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "destinationGasLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "bridgeParams",
          "type": "bytes"
        }
      ],
      "name": "BridgeMessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "callerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTssAddress",
          "type": "address"
        }
      ],
      "name": "PauserAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "callerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTssAddress",
          "type": "address"
        }
      ],
      "name": "TSSAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "callerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTssUpdaterAddress",
          "type": "address"
        }
      ],
      "name": "TSSAddressUpdaterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "txSenderAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destinationAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "internalSendHash",
          "type": "bytes32"
        }
      ],
      "name": "onReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "txSenderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sourceChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "destinationAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "destinationChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "internalSendHash",
          "type": "bytes32"
        }
      ],
      "name": "onRevert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauserAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceTssAddressUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "destinationChainId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "destinationAddress",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "destinationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "bridgeParams",
              "type": "bytes"
            }
          ],
          "internalType": "struct CarrotBridgeInterfaces.SendInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tssAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tssAddressUpdater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pauserAddress_",
          "type": "address"
        }
      ],
      "name": "updatePauserAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tssAddress_",
          "type": "address"
        }
      ],
      "name": "updateTssAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6553da131c02d02f36a579a80bfc87bac4c44678ab611ea5da3957a7f3399df",
  "receipt": {
    "to": null,
    "from": "0xef1F5D4C835Ac094F8D96C26c2A964C99b4050e0",
    "contractAddress": "0xAd0Bc3A152355CFa13b36DC953272bAD305DE7E0",
    "transactionIndex": 1,
    "gasUsed": "851754",
    "logsBloom": "0x
    "blockHash": "0xc98fad35c523c4f600b3e5bd410cc7c25fc3076c7e9894b84e16c0d4690dacc5",
    "transactionHash": "0xb6553da131c02d02f36a579a80bfc87bac4c44678ab611ea5da3957a7f3399df",
    "logs": [],
    "blockNumber": 34417810,
    "cumulativeGasUsed": "1049222",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xef1F5D4C835Ac094F8D96C26c2A964C99b4050e0",
    "0xef1F5D4C835Ac094F8D96C26c2A964C99b4050e0",
    "0xef1F5D4C835Ac094F8D96C26c2A964C99b4050e0"
  ],
  "numDeployments": 1,
  "solcInputHash": "6c42ec0e530e6da4a06a3fde82b4de7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tssAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tssAddressUpdater_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauserAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotPauser\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotTss\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotTssOrUpdater\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotTssUpdater\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"}],\"name\":\"ExceedsMaxSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeTxSenderAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"internalSendHash\",\"type\":\"bytes32\"}],\"name\":\"BridgeMessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridgeTxSenderAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"destinationAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"internalSendHash\",\"type\":\"bytes32\"}],\"name\":\"BridgeMessageReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceTxOriginAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridgeTxSenderAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"destinationAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationGasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bridgeParams\",\"type\":\"bytes\"}],\"name\":\"BridgeMessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTssAddress\",\"type\":\"address\"}],\"name\":\"PauserAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTssAddress\",\"type\":\"address\"}],\"name\":\"TSSAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTssUpdaterAddress\",\"type\":\"address\"}],\"name\":\"TSSAddressUpdaterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txSenderAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"internalSendHash\",\"type\":\"bytes32\"}],\"name\":\"onReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"destinationAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"internalSendHash\",\"type\":\"bytes32\"}],\"name\":\"onRevert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauserAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceTssAddressUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"destinationAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"destinationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"bridgeParams\",\"type\":\"bytes\"}],\"internalType\":\"struct CarrotBridgeInterfaces.SendInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tssAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tssAddressUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pauserAddress_\",\"type\":\"address\"}],\"name\":\"updatePauserAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tssAddress_\",\"type\":\"address\"}],\"name\":\"updateTssAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ETH implementation of CarrotBridgeConnector. This contract manages interactions between TSS and different chains.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"kind\":\"dev\",\"methods\":{\"onReceive(bytes,uint256,address,bytes,bytes32)\":{\"details\":\"Handler to receive data from other chain. This method can be called only by TSS.\"},\"onRevert(address,uint256,bytes,uint256,bytes,bytes32)\":{\"details\":\"Handler to receive errors from other chain. This method can be called only by TSS.\"},\"pause()\":{\"details\":\"Pause the input (send) transactions.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceTssAddressUpdater()\":{\"details\":\"Changes the ownership of tssAddressUpdater to be the one held by the CarrotBridge TSS Signer nodes.\"},\"send((uint256,bytes,uint256,bytes,bytes))\":{\"details\":\"Entrypoint to send data through CarrotBridge This call locks the token on the contract and emits an event with all the data needed by the protocol.\"},\"unpause()\":{\"details\":\"Unpause the contract to allow transactions again.\"},\"updatePauserAddress(address)\":{\"details\":\"Update the pauser address. The only address allowed to do that is the current pauser.\"},\"updateTssAddress(address)\":{\"details\":\"Update the TSS address. The address can be updated by the TSS updater or the TSS address itself.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CarrotBridgeConnector.non-fee.sol\":\"CarrotBridgeConnectorNonFee\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CarrotBridgeConnector.base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\nimport \\\"./libraries/Pausable.sol\\\";\\n\\nimport \\\"./interfaces/ConnectorErrors.sol\\\";\\nimport \\\"./interfaces/CarrotBridgeInterfaces.sol\\\";\\n\\n/**\\n * @dev Main abstraction of CarrotBridgeConnector.\\n * This contract manages interactions between TSS and different chains.\\n * There's an instance of this contract on each chain supported by CarrotBridge.\\n */\\ncontract CarrotBridgeConnectorBase is ConnectorErrors, Pausable {\\n    /**\\n     * @dev Multisig contract to pause incoming transactions.\\n     * The responsibility of pausing outgoing transactions is left to the protocol for more flexibility.\\n     */\\n    address public pauserAddress;\\n\\n    /**\\n     * @dev Collectively held by CarrotBridge validators.\\n     */\\n    address public tssAddress;\\n\\n    /**\\n     * @dev This address will start pointing to a multisig contract, then it will become the TSS address itself.\\n     */\\n    address public tssAddressUpdater;\\n\\n    event BridgeMessageSent(\\n        address sourceTxOriginAddress,\\n        address indexed bridgeTxSenderAddress,\\n        uint256 indexed destinationChainId,\\n        bytes destinationAddress,\\n        uint256 destinationGasLimit,\\n        bytes message,\\n        bytes bridgeParams\\n    );\\n\\n    event BridgeMessageReceived(\\n        bytes bridgeTxSenderAddress,\\n        uint256 indexed sourceChainId,\\n        address indexed destinationAddress,\\n        bytes message,\\n        bytes32 indexed internalSendHash\\n    );\\n\\n    event BridgeMessageReverted(\\n        address bridgeTxSenderAddress,\\n        uint256 sourceChainId,\\n        uint256 indexed destinationChainId,\\n        bytes destinationAddress,\\n        bytes message,\\n        bytes32 indexed internalSendHash\\n    );\\n\\n    event TSSAddressUpdated(address callerAddress, address newTssAddress);\\n\\n    event TSSAddressUpdaterUpdated(address callerAddress, address newTssUpdaterAddress);\\n\\n    event PauserAddressUpdated(address callerAddress, address newTssAddress);\\n\\n    /**\\n     * @dev Constructor requires initial addresses.\\n     */\\n    constructor(address tssAddress_, address tssAddressUpdater_, address pauserAddress_) {\\n        if (\\n            tssAddress_ == address(0) ||\\n            tssAddressUpdater_ == address(0) ||\\n            pauserAddress_ == address(0)\\n        ) {\\n            revert CommonErrors.InvalidAddress();\\n        }\\n\\n        tssAddress = tssAddress_;\\n        tssAddressUpdater = tssAddressUpdater_;\\n        pauserAddress = pauserAddress_;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict actions to pauser address.\\n     */\\n    modifier onlyPauser() {\\n        if (msg.sender != pauserAddress) revert CallerIsNotPauser(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict actions to TSS address.\\n     */\\n    modifier onlyTssAddress() {\\n        if (msg.sender != tssAddress) revert CallerIsNotTss(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict actions to TSS updater address.\\n     */\\n    modifier onlyTssUpdater() {\\n        if (msg.sender != tssAddressUpdater) revert CallerIsNotTssUpdater(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Update the pauser address. The only address allowed to do that is the current pauser.\\n     */\\n    function updatePauserAddress(address pauserAddress_) external onlyPauser {\\n        if (pauserAddress_ == address(0)) revert CommonErrors.InvalidAddress();\\n\\n        pauserAddress = pauserAddress_;\\n\\n        emit PauserAddressUpdated(msg.sender, pauserAddress_);\\n    }\\n\\n    /**\\n     * @dev Update the TSS address. The address can be updated by the TSS updater or the TSS address itself.\\n     */\\n    function updateTssAddress(address tssAddress_) external {\\n        if (msg.sender != tssAddress && msg.sender != tssAddressUpdater)\\n            revert CallerIsNotTssOrUpdater(msg.sender);\\n        if (tssAddress_ == address(0)) revert CommonErrors.InvalidAddress();\\n\\n        tssAddress = tssAddress_;\\n\\n        emit TSSAddressUpdated(msg.sender, tssAddress_);\\n    }\\n\\n    /**\\n     * @dev Changes the ownership of tssAddressUpdater to be the one held by the CarrotBridge TSS Signer nodes.\\n     */\\n    function renounceTssAddressUpdater() external onlyTssUpdater {\\n        if (tssAddress == address(0)) revert CommonErrors.InvalidAddress();\\n\\n        tssAddressUpdater = tssAddress;\\n        emit TSSAddressUpdaterUpdated(msg.sender, tssAddressUpdater);\\n    }\\n\\n    /**\\n     * @dev Pause the input (send) transactions.\\n     */\\n\\n    function pause() external onlyPauser {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause the contract to allow transactions again.\\n     */\\n\\n    function unpause() external onlyPauser {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Entrypoint to send data and value through CarrotBridge.\\n     */\\n    function send(CarrotBridgeInterfaces.SendInput calldata input) external virtual {}\\n\\n    /**\\n     * @dev Handler to receive data from other chain.\\n     * This method can be called only by TSS. Access validation is in implementation.\\n     */\\n    function onReceive(\\n        bytes calldata bridgeTxSenderAddress,\\n        uint256 sourceChainId,\\n        address destinationAddress,\\n        bytes calldata message,\\n        bytes32 internalSendHash\\n    ) external virtual {}\\n\\n    /**\\n     * @dev Handler to receive errors from other chain.\\n     * This method can be called only by TSS. Access validation is in implementation.\\n     */\\n    function onRevert(\\n        address bridgeTxSenderAddress,\\n        uint256 sourceChainId,\\n        bytes calldata destinationAddress,\\n        uint256 destinationChainId,\\n        bytes calldata message,\\n        bytes32 internalSendHash\\n    ) external virtual {}\\n}\\n\",\"keccak256\":\"0x1337fa00fce053949f26bd79a1e9073292ce626345ecb1e815aaafb58118382b\",\"license\":\"MIT\"},\"contracts/CarrotBridgeConnector.non-fee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/ConnectorErrors.sol\\\";\\nimport \\\"./CarrotBridgeConnector.base.sol\\\";\\nimport \\\"./interfaces/CarrotBridgeInterfaces.sol\\\";\\n\\n/**\\n * @dev ETH implementation of CarrotBridgeConnector.\\n * This contract manages interactions between TSS and different chains.\\n */\\ncontract CarrotBridgeConnectorNonFee is CarrotBridgeConnectorBase {\\n    constructor(\\n        address tssAddress_,\\n        address tssAddressUpdater_,\\n        address pauserAddress_\\n    ) CarrotBridgeConnectorBase(tssAddress_, tssAddressUpdater_, pauserAddress_) {}\\n\\n    /**\\n     * @dev Entrypoint to send data through CarrotBridge\\n     * This call locks the token on the contract and emits an event with all the data needed by the protocol.\\n     */\\n    function send(CarrotBridgeInterfaces.SendInput calldata input) external override whenNotPaused {\\n        emit BridgeMessageSent(\\n            tx.origin,\\n            msg.sender,\\n            input.destinationChainId,\\n            input.destinationAddress,\\n            input.destinationGasLimit,\\n            input.message,\\n            input.bridgeParams\\n        );\\n    }\\n\\n    /**\\n     * @dev Handler to receive data from other chain.\\n     * This method can be called only by TSS.\\n     */\\n    function onReceive(\\n        bytes calldata txSenderAddress,\\n        uint256 sourceChainId,\\n        address destinationAddress,\\n        bytes calldata message,\\n        bytes32 internalSendHash\\n    ) external override onlyTssAddress {\\n        if (message.length > 0) {\\n            CarrotBridgeReceiver(destinationAddress).onBridgeMessage(\\n                CarrotBridgeInterfaces.BridgeMessage(\\n                    txSenderAddress,\\n                    sourceChainId,\\n                    destinationAddress,\\n                    message\\n                )\\n            );\\n        }\\n\\n        emit BridgeMessageReceived(\\n            txSenderAddress,\\n            sourceChainId,\\n            destinationAddress,\\n            message,\\n            internalSendHash\\n        );\\n    }\\n\\n    /**\\n     * @dev Handler to receive errors from other chain.\\n     * This method can be called only by TSS.\\n     */\\n    function onRevert(\\n        address txSenderAddress,\\n        uint256 sourceChainId,\\n        bytes calldata destinationAddress,\\n        uint256 destinationChainId,\\n        bytes calldata message,\\n        bytes32 internalSendHash\\n    ) external override whenNotPaused onlyTssAddress {\\n        if (message.length > 0) {\\n            CarrotBridgeReceiver(txSenderAddress).onBridgeRevert(\\n                CarrotBridgeInterfaces.BridgeRevert(\\n                    txSenderAddress,\\n                    sourceChainId,\\n                    destinationAddress,\\n                    destinationChainId,\\n                    message\\n                )\\n            );\\n        }\\n\\n        emit BridgeMessageReverted(\\n            txSenderAddress,\\n            sourceChainId,\\n            destinationChainId,\\n            destinationAddress,\\n            message,\\n            internalSendHash\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x12540520b87cad1330a4cc0214ed8e72ef9462ba5f705823a9b67adf18aa210c\",\"license\":\"MIT\"},\"contracts/interfaces/CarrotBridgeInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\ninterface CarrotBridgeInterfaces {\\n    /**\\n     * @dev Use SendInput to interact with the Connector: connector.send(SendInput)\\n     */\\n    struct SendInput {\\n        /// @dev Chain id of the destination chain.\\n        uint256 destinationChainId;\\n        /// @dev Address receiving the message on the destination chain (expressed in bytes since it can be non-EVM)\\n        bytes destinationAddress;\\n        /// @dev Gas limit for the destination chain's transaction\\n        uint256 destinationGasLimit;\\n        /// @dev An encoded, arbitrary message to be parsed by the destination contract\\n        bytes message;\\n        /// @dev Optional parameters for the CarrotBridge protocol\\n        bytes bridgeParams;\\n    }\\n\\n    /**\\n     * @dev Our Connector calls onBridgeMessage with this struct as argument\\n     */\\n    struct BridgeMessage {\\n        bytes txSenderAddress;\\n        uint256 sourceChainId;\\n        address destinationAddress;\\n        bytes message;\\n    }\\n\\n    /**\\n     * @dev Our Connector calls onBridgeRevert with this struct as argument\\n     */\\n    struct BridgeRevert {\\n        address txSenderAddress;\\n        uint256 sourceChainId;\\n        bytes destinationAddress;\\n        uint256 destinationChainId;\\n        bytes message;\\n    }\\n}\\n\\ninterface CarrotBridgeConnector {\\n    /**\\n     * @dev Sending value and data cross-chain is as easy as calling connector.send(SendInput)\\n     */\\n    function send(CarrotBridgeInterfaces.SendInput calldata input) external;\\n}\\n\\ninterface CarrotBridgeReceiver {\\n    /**\\n     * @dev onBridgeMessage is called when a cross-chain message reaches a contract\\n     */\\n    function onBridgeMessage(CarrotBridgeInterfaces.BridgeMessage calldata bridgeMessage) external;\\n\\n    /**\\n     * @dev onBridgeRevert is called when a cross-chain message reverts.\\n     * It's useful to rollback to the original state\\n     */\\n    function onBridgeRevert(CarrotBridgeInterfaces.BridgeRevert calldata bridgeRevert) external;\\n}\\n\\ninterface CommonErrors {\\n    error InvalidAddress();\\n}\\n\",\"keccak256\":\"0xed95589f11118c89f5b706e02b4e14419b29166377defc59184750f077900ce9\",\"license\":\"MIT\"},\"contracts/interfaces/ConnectorErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\n/**\\n * @dev Interface with connector custom errors\\n */\\ninterface ConnectorErrors {\\n    // @dev Thrown when caller is not the address defined as paused address\\n    error CallerIsNotPauser(address caller);\\n\\n    // @dev Thrown when caller is not the address defined as TSS address\\n    error CallerIsNotTss(address caller);\\n\\n    // @dev Thrown when caller is not the address defined as TSS Updater address\\n    error CallerIsNotTssUpdater(address caller);\\n\\n    // @dev Thrown when caller is not the address defined as TSS or TSS Updater address\\n    error CallerIsNotTssOrUpdater(address caller);\\n\\n    // @dev Thrown when maxSupply will be exceed if minting will proceed\\n    error ExceedsMaxSupply(uint256 maxSupply);\\n}\\n\",\"keccak256\":\"0xddce7d4ebd128004e9d63f85a4a9d1a9f0d2a63aefa445ca9cd1bbc812e663b4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x28b0e3104ddb60adddef3c545654df69f0c02b497448d49a620bce9d128dfd30\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity >=0.8.7;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe515ff86f8f077d987d8b21bc28616f77b06177cfe98b044f91233a9f40dae03\",\"license\":\"MIT\"},\"contracts/libraries/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity >=0.8.7;\\n\\nimport {Context} from \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe98439c725e5f37787eebdaf5a65f840002dc37f44e408e284d3875557ab9735\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e6d380380610e6d83398101604081905261002f916100fb565b6000805460ff191690558282826001600160a01b038316158061005957506001600160a01b038216155b8061006b57506001600160a01b038116155b156100895760405163e6c4247b60e01b815260040160405180910390fd5b600180546001600160a01b039485166001600160a01b031991821617909155600280549385169390911692909217909155600080549190921661010002610100600160a81b03199091161790555061013e915050565b80516001600160a01b03811681146100f657600080fd5b919050565b60008060006060848603121561011057600080fd5b610119846100df565b9250610127602085016100df565b9150610135604085016100df565b90509250925092565b610d208061014d6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806373d01ff81161007157806373d01ff814610142578063779e3b63146101555780638456cb591461015d5780639122c34414610165578063a7e3d6ad14610178578063f7fb869b1461018b57600080fd5b8063328a01d0146100b95780633f4ba83a146100e95780635b112591146100f35780635bb47615146101065780635c975abb146101195780636128480f1461012f575b600080fd5b6002546100cc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16101a3565b005b6001546100cc906001600160a01b031681565b6100f16101143660046108a1565b6101e4565b60005460ff1660405190151581526020016100e0565b6100f161013d3660046108ff565b61025c565b6100f1610150366004610963565b610319565b6100f161049b565b6100f161054f565b6100f16101733660046108ff565b610589565b6100f16101863660046109f9565b61064b565b6000546100cc9061010090046001600160a01b031681565b60005461010090046001600160a01b031633146101da57604051634677a0d360e01b81523360048201526024015b60405180910390fd5b6101e26107d0565b565b6101ec61081d565b8035337f7bb84a5109bf1ed464c2f5771ff5fe1fbb31efe3d2a9bf25de5d531d45ac848f3261021e6020860186610a94565b60408701356102306060890189610a94565b61023d60808b018b610a94565b604051610251989796959493929190610b04565b60405180910390a350565b60005461010090046001600160a01b0316331461028e57604051634677a0d360e01b81523360048201526024016101d1565b6001600160a01b0381166102b55760405163e6c4247b60e01b815260040160405180910390fd5b60008054610100600160a81b0319166101006001600160a01b038416908102919091179091556040805133815260208101929092527fd41d83655d484bdf299598751c371b2d92088667266fe3774b25a97bdd5d039791015b60405180910390a150565b6001546001600160a01b031633146103495760405160016247a98f60e11b031981523360048201526024016101d1565b811561044957836001600160a01b0316630c55c83860405180608001604052808a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060208082018a90526001600160a01b0389166040808401919091528051601f890183900483028101830190915287815260609092019190889088908190840183828082843760009201919091525050509152506040516001600160e01b031960e084901b1681526104169190600401610bb3565b600060405180830381600087803b15801561043057600080fd5b505af1158015610444573d6000803e3d6000fd5b505050505b80846001600160a01b0316867f6e4115a3014a2507c734bbed5e2d1e073c7a3c80cc779bc5b072ca3d78a88ab28a8a888860405161048a9493929190610c11565b60405180910390a450505050505050565b6002546001600160a01b031633146104c8576040516373803b2f60e11b81523360048201526024016101d1565b6001546001600160a01b03166104f15760405163e6c4247b60e01b815260040160405180910390fd5b600154600280546001600160a01b0319166001600160a01b0390921691821790556040805133815260208101929092527f5104c9abdc7d111c2aeb4ce890ac70274a4be2ee83f46a62551be5e6ebc82dd091015b60405180910390a1565b60005461010090046001600160a01b0316331461058157604051634677a0d360e01b81523360048201526024016101d1565b6101e2610841565b6001546001600160a01b031633148015906105af57506002546001600160a01b03163314155b156105cf5760405163cdfcef9760e01b81523360048201526024016101d1565b6001600160a01b0381166105f65760405163e6c4247b60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092527fe79965b5c67dcfb2cf5fe152715e4a7256cee62a3d5dd8484fd8a8539eb8beff910161030e565b61065361081d565b6001546001600160a01b031633146106835760405160016247a98f60e11b031981523360048201526024016101d1565b811561078357876001600160a01b031663231558fd6040518060a001604052808b6001600160a01b031681526020018a815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602080820189905260408051601f8901839004830281018301825288815292019190889088908190840183828082843760009201919091525050509152506040516001600160e01b031960e084901b1681526107509190600401610c43565b600060405180830381600087803b15801561076a57600080fd5b505af115801561077e573d6000803e3d6000fd5b505050505b80847fa91e4c81c25dfba02fe42b6bfc690fea05c25ffb4eef7a1a8200d1ef3d9b61c08a8a8a8a89896040516107be96959493929190610ca2565b60405180910390a35050505050505050565b6107d861087e565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610545565b60005460ff16156101e25760405163d93c066560e01b815260040160405180910390fd5b61084961081d565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586108053390565b60005460ff166101e257604051638dfc202b60e01b815260040160405180910390fd5b6000602082840312156108b357600080fd5b813567ffffffffffffffff8111156108ca57600080fd5b820160a081850312156108dc57600080fd5b9392505050565b80356001600160a01b03811681146108fa57600080fd5b919050565b60006020828403121561091157600080fd5b6108dc826108e3565b60008083601f84011261092c57600080fd5b50813567ffffffffffffffff81111561094457600080fd5b60208301915083602082850101111561095c57600080fd5b9250929050565b600080600080600080600060a0888a03121561097e57600080fd5b873567ffffffffffffffff8082111561099657600080fd5b6109a28b838c0161091a565b909950975060208a013596508791506109bd60408b016108e3565b955060608a01359150808211156109d357600080fd5b506109e08a828b0161091a565b989b979a50959894979596608090950135949350505050565b60008060008060008060008060c0898b031215610a1557600080fd5b610a1e896108e3565b975060208901359650604089013567ffffffffffffffff80821115610a4257600080fd5b610a4e8c838d0161091a565b909850965060608b0135955060808b0135915080821115610a6e57600080fd5b50610a7b8b828c0161091a565b999c989b50969995989497949560a00135949350505050565b6000808335601e19843603018112610aab57600080fd5b83018035915067ffffffffffffffff821115610ac657600080fd5b60200191503681900382131561095c57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038916815260a060208201819052600090610b29908301898b610adb565b8760408401528281036060840152610b42818789610adb565b90508281036080840152610b57818587610adb565b9b9a5050505050505050505050565b6000815180845260005b81811015610b8c57602081850181015186830182015201610b70565b81811115610b9e576000602083870101525b50601f01601f19169290920160200192915050565b602081526000825160806020840152610bcf60a0840182610b66565b90506020840151604084015260018060a01b0360408501511660608401526060840151601f19848303016080850152610c088282610b66565b95945050505050565b604081526000610c25604083018688610adb565b8281036020840152610c38818587610adb565b979650505050505050565b6020815260018060a01b038251166020820152602082015160408201526000604083015160a06060840152610c7b60c0840182610b66565b9050606084015160808401526080840151601f198483030160a0850152610c088282610b66565b60018060a01b0387168152856020820152608060408201526000610cca608083018688610adb565b8281036060840152610cdd818587610adb565b999850505050505050505056fea2646970667358221220652d5aa25a2ad8276e942e3b3b0d2e27749331f3b730e21795464fba85503a5864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806373d01ff81161007157806373d01ff814610142578063779e3b63146101555780638456cb591461015d5780639122c34414610165578063a7e3d6ad14610178578063f7fb869b1461018b57600080fd5b8063328a01d0146100b95780633f4ba83a146100e95780635b112591146100f35780635bb47615146101065780635c975abb146101195780636128480f1461012f575b600080fd5b6002546100cc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16101a3565b005b6001546100cc906001600160a01b031681565b6100f16101143660046108a1565b6101e4565b60005460ff1660405190151581526020016100e0565b6100f161013d3660046108ff565b61025c565b6100f1610150366004610963565b610319565b6100f161049b565b6100f161054f565b6100f16101733660046108ff565b610589565b6100f16101863660046109f9565b61064b565b6000546100cc9061010090046001600160a01b031681565b60005461010090046001600160a01b031633146101da57604051634677a0d360e01b81523360048201526024015b60405180910390fd5b6101e26107d0565b565b6101ec61081d565b8035337f7bb84a5109bf1ed464c2f5771ff5fe1fbb31efe3d2a9bf25de5d531d45ac848f3261021e6020860186610a94565b60408701356102306060890189610a94565b61023d60808b018b610a94565b604051610251989796959493929190610b04565b60405180910390a350565b60005461010090046001600160a01b0316331461028e57604051634677a0d360e01b81523360048201526024016101d1565b6001600160a01b0381166102b55760405163e6c4247b60e01b815260040160405180910390fd5b60008054610100600160a81b0319166101006001600160a01b038416908102919091179091556040805133815260208101929092527fd41d83655d484bdf299598751c371b2d92088667266fe3774b25a97bdd5d039791015b60405180910390a150565b6001546001600160a01b031633146103495760405160016247a98f60e11b031981523360048201526024016101d1565b811561044957836001600160a01b0316630c55c83860405180608001604052808a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060208082018a90526001600160a01b0389166040808401919091528051601f890183900483028101830190915287815260609092019190889088908190840183828082843760009201919091525050509152506040516001600160e01b031960e084901b1681526104169190600401610bb3565b600060405180830381600087803b15801561043057600080fd5b505af1158015610444573d6000803e3d6000fd5b505050505b80846001600160a01b0316867f6e4115a3014a2507c734bbed5e2d1e073c7a3c80cc779bc5b072ca3d78a88ab28a8a888860405161048a9493929190610c11565b60405180910390a450505050505050565b6002546001600160a01b031633146104c8576040516373803b2f60e11b81523360048201526024016101d1565b6001546001600160a01b03166104f15760405163e6c4247b60e01b815260040160405180910390fd5b600154600280546001600160a01b0319166001600160a01b0390921691821790556040805133815260208101929092527f5104c9abdc7d111c2aeb4ce890ac70274a4be2ee83f46a62551be5e6ebc82dd091015b60405180910390a1565b60005461010090046001600160a01b0316331461058157604051634677a0d360e01b81523360048201526024016101d1565b6101e2610841565b6001546001600160a01b031633148015906105af57506002546001600160a01b03163314155b156105cf5760405163cdfcef9760e01b81523360048201526024016101d1565b6001600160a01b0381166105f65760405163e6c4247b60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040805133815260208101929092527fe79965b5c67dcfb2cf5fe152715e4a7256cee62a3d5dd8484fd8a8539eb8beff910161030e565b61065361081d565b6001546001600160a01b031633146106835760405160016247a98f60e11b031981523360048201526024016101d1565b811561078357876001600160a01b031663231558fd6040518060a001604052808b6001600160a01b031681526020018a815260200189898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602080820189905260408051601f8901839004830281018301825288815292019190889088908190840183828082843760009201919091525050509152506040516001600160e01b031960e084901b1681526107509190600401610c43565b600060405180830381600087803b15801561076a57600080fd5b505af115801561077e573d6000803e3d6000fd5b505050505b80847fa91e4c81c25dfba02fe42b6bfc690fea05c25ffb4eef7a1a8200d1ef3d9b61c08a8a8a8a89896040516107be96959493929190610ca2565b60405180910390a35050505050505050565b6107d861087e565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610545565b60005460ff16156101e25760405163d93c066560e01b815260040160405180910390fd5b61084961081d565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586108053390565b60005460ff166101e257604051638dfc202b60e01b815260040160405180910390fd5b6000602082840312156108b357600080fd5b813567ffffffffffffffff8111156108ca57600080fd5b820160a081850312156108dc57600080fd5b9392505050565b80356001600160a01b03811681146108fa57600080fd5b919050565b60006020828403121561091157600080fd5b6108dc826108e3565b60008083601f84011261092c57600080fd5b50813567ffffffffffffffff81111561094457600080fd5b60208301915083602082850101111561095c57600080fd5b9250929050565b600080600080600080600060a0888a03121561097e57600080fd5b873567ffffffffffffffff8082111561099657600080fd5b6109a28b838c0161091a565b909950975060208a013596508791506109bd60408b016108e3565b955060608a01359150808211156109d357600080fd5b506109e08a828b0161091a565b989b979a50959894979596608090950135949350505050565b60008060008060008060008060c0898b031215610a1557600080fd5b610a1e896108e3565b975060208901359650604089013567ffffffffffffffff80821115610a4257600080fd5b610a4e8c838d0161091a565b909850965060608b0135955060808b0135915080821115610a6e57600080fd5b50610a7b8b828c0161091a565b999c989b50969995989497949560a00135949350505050565b6000808335601e19843603018112610aab57600080fd5b83018035915067ffffffffffffffff821115610ac657600080fd5b60200191503681900382131561095c57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038916815260a060208201819052600090610b29908301898b610adb565b8760408401528281036060840152610b42818789610adb565b90508281036080840152610b57818587610adb565b9b9a5050505050505050505050565b6000815180845260005b81811015610b8c57602081850181015186830182015201610b70565b81811115610b9e576000602083870101525b50601f01601f19169290920160200192915050565b602081526000825160806020840152610bcf60a0840182610b66565b90506020840151604084015260018060a01b0360408501511660608401526060840151601f19848303016080850152610c088282610b66565b95945050505050565b604081526000610c25604083018688610adb565b8281036020840152610c38818587610adb565b979650505050505050565b6020815260018060a01b038251166020820152602082015160408201526000604083015160a06060840152610c7b60c0840182610b66565b9050606084015160808401526080840151601f198483030160a0850152610c088282610b66565b60018060a01b0387168152856020820152608060408201526000610cca608083018688610adb565b8281036060840152610cdd818587610adb565b999850505050505050505056fea2646970667358221220652d5aa25a2ad8276e942e3b3b0d2e27749331f3b730e21795464fba85503a5864736f6c63430008090033",
  "devdoc": {
    "details": "ETH implementation of CarrotBridgeConnector. This contract manages interactions between TSS and different chains.",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "onReceive(bytes,uint256,address,bytes,bytes32)": {
        "details": "Handler to receive data from other chain. This method can be called only by TSS."
      },
      "onRevert(address,uint256,bytes,uint256,bytes,bytes32)": {
        "details": "Handler to receive errors from other chain. This method can be called only by TSS."
      },
      "pause()": {
        "details": "Pause the input (send) transactions."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceTssAddressUpdater()": {
        "details": "Changes the ownership of tssAddressUpdater to be the one held by the CarrotBridge TSS Signer nodes."
      },
      "send((uint256,bytes,uint256,bytes,bytes))": {
        "details": "Entrypoint to send data through CarrotBridge This call locks the token on the contract and emits an event with all the data needed by the protocol."
      },
      "unpause()": {
        "details": "Unpause the contract to allow transactions again."
      },
      "updatePauserAddress(address)": {
        "details": "Update the pauser address. The only address allowed to do that is the current pauser."
      },
      "updateTssAddress(address)": {
        "details": "Update the TSS address. The address can be updated by the TSS updater or the TSS address itself."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1015,
        "contract": "contracts/CarrotBridgeConnector.non-fee.sol:CarrotBridgeConnectorNonFee",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12,
        "contract": "contracts/CarrotBridgeConnector.non-fee.sol:CarrotBridgeConnectorNonFee",
        "label": "pauserAddress",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15,
        "contract": "contracts/CarrotBridgeConnector.non-fee.sol:CarrotBridgeConnectorNonFee",
        "label": "tssAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18,
        "contract": "contracts/CarrotBridgeConnector.non-fee.sol:CarrotBridgeConnectorNonFee",
        "label": "tssAddressUpdater",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}